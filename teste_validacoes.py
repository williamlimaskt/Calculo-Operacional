#!/usr/bin/env python3
"""
Script para testar as valida√ß√µes robustas
Demonstra como o sistema trata valores absurdos
"""

from validacoes import (
    validar_total_chamados, 
    validar_tma, 
    validar_data_robusta, 
    validar_dados_completos,
    obter_mensagens_ajuda
)

def testar_validacoes():
    """Testa diversos cen√°rios de valida√ß√£o"""
    
    print("üß™ TESTE DE VALIDA√á√ïES ROBUSTAS")
    print("=" * 50)
    
    # Mostrar limites do sistema
    mensagens = obter_mensagens_ajuda()
    print("\nüìã LIMITES DO SISTEMA:")
    for chave, valor in mensagens.items():
        print(f"‚Ä¢ {chave}: {valor}")
    
    print("\n" + "=" * 50)
    
    # Teste 1: Valores absurdos para total de chamados
    print("\nüî¢ TESTE 1: Total de Chamados")
    casos_chamados = [
        ("99999999999", "Valor absurdo"),
        ("0", "Zero"),
        ("-100", "Negativo"),
        ("abc", "Texto"),
        ("", "Vazio"),
        ("1000001", "Acima do limite"),
        ("500", "Valor v√°lido")
    ]
    
    for valor, descricao in casos_chamados:
        valido, msg, resultado = validar_total_chamados(valor)
        status = "‚úÖ" if valido else "‚ùå"
        print(f"{status} {descricao} ({valor}): {msg}")
    
    # Teste 2: Valores absurdos para TMA
    print("\n‚è±Ô∏è TESTE 2: Tempo M√©dio de Atendimento (TMA)")
    casos_tma = [
        ("99999999", "Valor absurdo"),
        ("XP", "Texto"),
        ("0", "Zero"),
        ("-50", "Negativo"),
        ("1441", "Acima de 24h"),
        ("", "Vazio"),
        ("90", "Valor v√°lido")
    ]
    
    for valor, descricao in casos_tma:
        valido, msg, resultado = validar_tma(valor)
        status = "‚úÖ" if valido else "‚ùå"
        print(f"{status} {descricao} ({valor}): {msg}")
    
    # Teste 3: Datas absurdas
    print("\nüìÖ TESTE 3: Datas")
    casos_datas = [
        ("01/01/1900", "Ano muito antigo"),
        ("32/12/2025", "Dia inv√°lido"),
        ("15/13/2025", "M√™s inv√°lido"),
        ("29/02/2025", "29 de fevereiro em ano n√£o bissexto"),
        ("31/04/2025", "31 de abril (n√£o existe)"),
        ("abc/def/ghi", "Texto"),
        ("", "Vazio"),
        ("15/06/2025", "Data v√°lida")
    ]
    
    for valor, descricao in casos_datas:
        valido, msg, resultado = validar_data_robusta(valor)
        status = "‚úÖ" if valido else "‚ùå"
        print(f"{status} {descricao} ({valor}): {msg}")
    
    # Teste 4: Cen√°rios completos
    print("\nüéØ TESTE 4: Cen√°rios Completos")
    cenarios = [
        {
            'nome': 'Cen√°rio V√°lido',
            'dados': ('500', '90', '01/01/2025', '31/01/2025')
        },
        {
            'nome': 'Valores Absurdos',
            'dados': ('99999999999', '99999999', '01/01/1900', '31/12/2101')
        },
        {
            'nome': 'Texto em Campos Num√©ricos',
            'dados': ('abc', 'XP', '01/01/2025', '31/01/2025')
        },
        {
            'nome': 'Per√≠odo Invertido',
            'dados': ('500', '90', '31/01/2025', '01/01/2025')
        },
        {
            'nome': 'Per√≠odo Muito Longo',
            'dados': ('500', '90', '01/01/2025', '01/01/2035')
        }
    ]
    
    for cenario in cenarios:
        print(f"\nüìä {cenario['nome']}:")
        valido, msg, dados = validar_dados_completos(*cenario['dados'])
        status = "‚úÖ" if valido else "‚ùå"
        print(f"{status} Resultado: {msg}")
        if dados:
            print(f"   Dados validados: {dados}")

def demonstrar_protecoes():
    """Demonstra as prote√ß√µes contra valores absurdos"""
    
    print("\nüõ°Ô∏è DEMONSTRA√á√ÉO DE PROTE√á√ïES")
    print("=" * 50)
    
    print("\n‚ùå O que acontece com valores absurdos:")
    print("‚Ä¢ 99999999999 chamados ‚Üí Rejeitado (m√°ximo 1.000.000)")
    print("‚Ä¢ 99999999 minutos TMA ‚Üí Rejeitado (m√°ximo 1.440 minutos = 24h)")
    print("‚Ä¢ 01/01/1900 ‚Üí Rejeitado (ano m√≠nimo 1900)")
    print("‚Ä¢ 31/02/2025 ‚Üí Rejeitado (data inexistente)")
    print("‚Ä¢ 'XP' como TMA ‚Üí Rejeitado (apenas n√∫meros)")
    print("‚Ä¢ Per√≠odo de 10 anos ‚Üí Rejeitado (m√°ximo 3.650 dias)")
    
    print("\n‚úÖ O que √© aceito:")
    print("‚Ä¢ Total de chamados: 1 a 1.000.000")
    print("‚Ä¢ TMA: 1 a 1.440 minutos (24 horas)")
    print("‚Ä¢ Datas: 01/01/1900 a 31/12/2100")
    print("‚Ä¢ Per√≠odos: 1 a 3.650 dias (10 anos)")
    
    print("\nüîç Valida√ß√µes implementadas:")
    print("‚Ä¢ Verifica√ß√£o de campos vazios")
    print("‚Ä¢ Valida√ß√£o de formato de n√∫meros")
    print("‚Ä¢ Verifica√ß√£o de limites m√≠nimos e m√°ximos")
    print("‚Ä¢ Valida√ß√£o de formato de datas (regex)")
    print("‚Ä¢ Verifica√ß√£o de datas inexistentes")
    print("‚Ä¢ Valida√ß√£o de per√≠odos l√≥gicos")
    print("‚Ä¢ Tratamento de exce√ß√µes")

if __name__ == "__main__":
    testar_validacoes()
    demonstrar_protecoes()
    
    print("\n" + "=" * 50)
    print("üéâ Teste conclu√≠do! O sistema est√° protegido contra valores absurdos.")
    print("üí° Execute 'python gui.py' para testar a interface gr√°fica.")
    print("üí° Execute 'python index.py' para testar a vers√£o console.") 