"""
Inputs / Interface

"""

def obter_dados_entrada():
    """
    Obt√©m os dados de entrada do usu√°rio com valida√ß√µes robustas
    
    Returns:
        dict: Dicion√°rio com os dados informados ou None se inv√°lido
    """
    try:
        from validacoes import validar_dados_completos, obter_mensagens_ajuda
        
        # Mostrar limites
        mensagens = obter_mensagens_ajuda()
        print("üìã LIMITES DO SISTEMA:")
        print(f"‚Ä¢ {mensagens['total_chamados']}")
        print(f"‚Ä¢ {mensagens['tma']}")
        print(f"‚Ä¢ {mensagens['data']}")
        print(f"‚Ä¢ {mensagens['periodo']}")
        print()
        
        # Obter dados
        total_chamados_str = input("Digite o total de chamados: ")
        tma_str = input("Digite o tempo m√©dio de atendimento em minutos: ")
        
        print("\nInforme o per√≠odo para an√°lise:")
        data_inicio_str = input("Data de in√≠cio (DD/MM/AAAA): ")
        data_fim_str = input("Data de fim (DD/MM/AAAA): ")
        
        # Validar todos os dados
        valido, mensagem, dados_validados = validar_dados_completos(
            total_chamados_str, tma_str, data_inicio_str, data_fim_str
        )
        
        if not valido:
            print(f"‚ùå Erro: {mensagem}")
            return None
            
        # Converter para formato esperado pelo sistema
        return {
            'total_chamados': dados_validados['total_chamados'],
            'tma': dados_validados['tma'],
            'data_inicio_str': data_inicio_str,
            'data_fim_str': data_fim_str
        }
        
    except ImportError:
        print("Erro: M√≥dulo de valida√ß√µes n√£o encontrado.")
        return None
    except Exception as e:
        print(f"Erro inesperado: {str(e)}")
        return None

def exibir_resultados(dados, metricas, dias_uteis, feriados, total_dias, data_inicio, data_fim):
    """
    Exibe os resultados dos c√°lculos
    
    Args:
        dados (dict): Dados de entrada
        metricas (dict): M√©tricas calculadas
        dias_uteis (int): N√∫mero de dias √∫teis
        feriados (list): Lista de feriados
        total_dias (int): Total de dias no per√≠odo
        data_inicio (datetime.date): Data de in√≠cio
        data_fim (datetime.date): Data de fim
    """
    # Resultados principais
    print("\n=== RESULTADOS ===")
    print(f"Total de chamados: {dados['total_chamados']}")
    print(f"Tempo m√©dio de atendimento: {dados['tma']} minutos")
    print(f"Per√≠odo: {data_inicio.strftime('%d/%m/%Y')} a {data_fim.strftime('%d/%m/%Y')}")
    print(f"Dias √∫teis no per√≠odo: {dias_uteis}")
    print(f"Tempo total necess√°rio: {metricas['tempo_total']} minutos")
    print(f"Tempo √∫til no per√≠odo: {metricas['horas_uteis_mes']} minutos")
    print(f"A capacidade operacional √© de {metricas['capacidade_operacional']:.0f} chamados por per√≠odo")
    print(f"Pessoas necess√°rias: {metricas['pessoas_necessarias']:.3f}")
    
    # Feriados
    if feriados:
        print(f"\nFeriados no per√≠odo:")
        for feriado in feriados:
            print(f"  - {feriado.strftime('%d/%m/%Y')} ({feriado.strftime('%A')})")
    else:
        print(f"\nNenhum feriado no per√≠odo")
    
    # An√°lise adicional
    from calculos_operacionais import calcular_percentual_dias_uteis, calcular_dias_nao_uteis
    
    dias_nao_uteis = calcular_dias_nao_uteis(total_dias, dias_uteis)
    percentual = calcular_percentual_dias_uteis(dias_uteis, total_dias)
    
    print(f"\n=== AN√ÅLISE ADICIONAL ===")
    print(f"Total de dias no per√≠odo: {total_dias}")
    print(f"Dias n√£o √∫teis (fins de semana + feriados): {dias_nao_uteis}")
    print(f"Percentual de dias √∫teis: {percentual:.1f}%")

def exibir_erro(mensagem):
    """
    Exibe mensagem de erro
    
    Args:
        mensagem (str): Mensagem de erro
    """
    print(f"Erro: {mensagem}")

def exibir_sucesso(mensagem):
    """
    Exibe mensagem de sucesso
    
    Args:
        mensagem (str): Mensagem de sucesso
    """
    print(f"‚úÖ {mensagem}") 